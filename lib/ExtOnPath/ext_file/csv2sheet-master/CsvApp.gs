/**
* CsvApp
* 
* Load csv and spreadsheet folders.
* 
* @param {Object} config - Options set in main function 
* for ease of use.
*/
function CsvApp(config) {
	
	// Import config
	this.extend(config);
		
	// Get folders
	this.root = new Folder(DriveApp.getRootFolder());
	this.testMode ? this.mode = 'test' : this.mode = 'deploy';
	this.folders = this.root.getSubFolders(['csv2sheet', this.mode, 
	    ['csvs_new', 'csvs_processed', 'csvs_notValid', 'logs', 'spreadsheets']]);	
	
	// Restore blank slate for test runs
	if (this.testMode) { 
		this.resetTest();
	};
    
	// Special sauce 
	this.defaultColWidth = 150;
	// ... sheet needs a lot more formatting
};

CsvApp.prototype = {
		
	/**
	 * createSpreadsheet
	 * 
	 * @param {String} name - Spreadsheet specified in metadata.
	 * @return {Object} spreadsheet - CsvApp spreadsheet object.
	 */
	createSpreadsheet : function(name) {

		// Create Google spreadsheet and instantiate CsvApp Spreadsheet object 
		var spreadsheet = new Spreadsheet(SpreadsheetApp.create(name));
		
		// Log
		Logger.log("New spreadsheet \'%s\' created", name)							
		
		// Move file to spreadsheets folder 
		this.root.moveFile(spreadsheet.file, this.folders.spreadsheets); 
			
		return spreadsheet;
	},
	
	/**
	 * getSpreadsheet
	 * 
	 * @param {String} name - Specified in metadata
	 * @returns {Object} spreadsheet - CsvApp spreadsheet object
	 */
	getSpreadsheetByName : function(name) {

		// Get spreadsheet files keyed by filename
		var spreadsheets = this.folders.spreadsheets.getFiles();
		
		// Return CsvApp spreadsheet object if Google spreadsheet exists
		if (spreadsheets[name]) {
			var spreadsheet = new Spreadsheet(SpreadsheetApp.open(spreadsheets[name]));
			return spreadsheet;
		}
		
		// Otherwise ...
		return false
	},
	
	/**
	 * resetTest
	 * 
	 * Restore test csvs to initial locations and delete generated spreadsheets 
	 */
	resetTest : function() {
		
        Logger.log('Resetting test files.');
                   
		// Delete spreadsheets generated by test
		this.folders.spreadsheets.empty();
		
		// Restore test csvs to "new" folder
		this.folders.csvs_processed.moveFiles(this.folders.csvs_new);
		this.folders.csvs_notValid.moveFiles(this.folders.csvs_new);
	}
}